
@GenModel(
	modelName="Slam", prefix="Slam",
	modelDirectory="/org.ietr.dftools.architecture/ecore-gen",
//	editDirectory="/org.ietr.dftools.architecture.edit/ecore-gen",
//	editorDirectory="/org.ietr.dftools.architecture.editor/ecore-gen",
//	testsDirectory="/org.ietr.dftools.architecture.tests/ecore-gen",

	// redirection="",
	// classNamePattern="",

	// codeFormatting="true",
	// cleanup="true",

	importerID="org.eclipse.emf.importer.ecore",

	// !! if true a instrs.ecore is generated in .impl and is used by xxpackage.init() to
	// load the intrs packages (by default this false unless the generated XyzPackage might
	// exceed Java's byte code limit of 64k)
	loadInitialization="false",
	creationCommands="false",
	creationIcons="false",
	dataTypeConverters="false",
	operationReflection="false"
)

@Ecore(nsURI="http://org.ietr.preesm/architecture/slam")

package org.ietr.dftools.architecture.slam

import org.ietr.dftools.architecture.slam.attributes.Parameter
import org.ietr.dftools.architecture.slam.attributes.VLNV
import org.ietr.dftools.architecture.slam.component.Component
import org.ietr.dftools.architecture.slam.component.HierarchyPort
import org.ietr.dftools.architecture.slam.link.Link
import org.ietr.dftools.architecture.utils.VLNVComparator

type IPath wraps org.eclipse.core.runtime.IPath

// !!! This is needed as of the current versions of xcore/xtext
// For some reason when using the default String/... (i.e. without the following)
// the corresponding EPackage attributes/... are resolved to type java.lang.Object
// instead of java.lang.String.
// This causes a problem for Tom mapping generation for instance.
// The following fixes this problem.
type String wraps String
type int wraps int
type long wraps long
type double wraps double


class Design extends VLNVedElement , ParameterizedElement {
	contains unordered ComponentInstance[] componentInstances keys instanceName
	contains Link[] links
	contains HierarchyPort[] hierarchyPorts
	container Component refined opposite refinements
	String path
	refers ComponentHolder componentHolder

	op boolean containsComponentInstance(String name) {
		return componentInstances.exists[instanceName == name]
	}

	op boolean containsComponent(VLNV name) {
		return componentHolder.components.exists[VLNVComparator.areSame(vlnv,name)]
	}
	op ComponentInstance getComponentInstance(String name) {
		return componentInstances.findFirst[instanceName == name]
	}

	op Component getComponent(VLNV name) {
		return componentHolder.components.findFirst[VLNVComparator.areSame(vlnv,name)]
	}
}

class ComponentInstance extends ParameterizedElement {
	refers Component component opposite instances
	String instanceName
	op boolean isHierarchical()
}

class VLNVedElement {
	contains VLNV vlnv
}

class ParameterizedElement {
	contains Parameter[] parameters keys key
}

class ComponentHolder {
	contains unordered Component[] components
}